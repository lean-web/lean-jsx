"use strict";(self.webpackChunklean_jsx_docs=self.webpackChunklean_jsx_docs||[]).push([[1943],{876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),i=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=i(t),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[u]="string"==typeof e?e:a,s[1]=p;for(var i=2;i<o;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7576:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var r=t(7896),a=(t(2784),t(876));const o={sidebar_position:3},s="Create a new page",p={unversionedId:"tutorial-basics/create-a-new-page",id:"tutorial-basics/create-a-new-page",title:"Create a new page",description:"Creating a new page is very simple. Just declare a new handler for the Express server and render some JSX content using LeanJSX's engine:",source:"@site/docs/tutorial-basics/create-a-new-page.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create-a-new-page",permalink:"/lean-jsx/docs/tutorial-basics/create-a-new-page",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Project structure",permalink:"/lean-jsx/docs/tutorial-basics/project-structure"},next:{title:"Create a component",permalink:"/lean-jsx/docs/tutorial-basics/create-a-component"}},l={},i=[{value:"Passing global context",id:"passing-global-context",level:2}],c={toc:i},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-new-page"},"Create a new page"),(0,a.kt)("p",null,"Creating a new page is very simple. Just declare a new handler for the Express server and render some JSX content using LeanJSX's engine:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'app.get("/about", async (req, res) => {\n    await LeanApp.render(\n        res,\n        <main>\n            <h1>About</h1>\n            <p>This is a simple page</p>\n        </main>,\n    );\n});\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"LeanApp.render")," function will use by default the template registered as ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," in LeanJSX's ",(0,a.kt)("inlineCode",{parentName:"p"},"buildApp"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { buildApp } from "lean-jsx/lib/server";\nimport path from "path";\n\nconst INDEX_HTML_PATH = path.resolve(__dirname, "index.html");\n\nconst app = buildApp({\n    templates: {\n        index: {\n            path: INDEX_HTML_PATH,\n            contentPlaceholder: "\x3c!--EAGER_CONTENT--\x3e",\n        },\n    },\n    logging: {\n        defaultLogLevel: "info",\n    },\n});\n')),(0,a.kt)("p",null,"To override the template used for rendering this page, we can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"templateName")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"render"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'app.get("/about", async (req, res) => {\n    await LeanApp.render(\n        res.set("Content-Security-Policy", CSP),\n        <main>\n            <h1>About</h1>\n            <p>This is a simple page</p>\n        </main>,\n        {templateName: \'mytemplate\'}\n    );\n});\n')),(0,a.kt)("h2",{id:"passing-global-context"},"Passing global context"),(0,a.kt)("p",null,"All LeanJSX receive by default a reference to the global context ",(0,a.kt)("inlineCode",{parentName:"p"},"SXLGlobalContext"),", but it needs to be retrieved from the server's request first:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'app.get("/about", async (req, res) => {\n    const globalContext = parseQueryParams(req);\n    await LeanApp.render(\n        res.set("Content-Security-Policy", CSP),\n        <App />,\n        {\n            globalContext\n        }\n    );\n});\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"parseQueryParams")," function is defined in a new LeanJSX project inside ",(0,a.kt)("inlineCode",{parentName:"p"},"context.ts"),", (were the type definition for ",(0,a.kt)("inlineCode",{parentName:"p"},"SXLGlobalContext")," can be extended):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'export interface RequestQueryParams {\n    someQueryParam?: boolean;\n}\n\ndeclare module "lean-jsx/src/types/context" {\n    interface SXLGlobalContext extends RequestQueryParams {}\n}\n\nexport function parseQueryParams(req: Request): RequestQueryParams {\n    return {\n        someQueryParam: Boolean(req.query?.someQueryParam)\n    };\n}\n')),(0,a.kt)("p",null,"Now any LeanJSX component can retrieve the global context without passing it as a prop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function MyComponent(props: SXL.Props) {\n    const { globalContext } = props;\n    return <>...</>\n}\n\n// ...\n// No props:\n<MyComponent/>\n")),(0,a.kt)("p",null,"For more information on global and local states, check our ",(0,a.kt)("a",{parentName:"p",href:"/docs/architecture/state-and-context#global-context"},"architecture section"),"."))}m.isMDXComponent=!0}}]);