"use strict";(self.webpackChunklean_jsx_docs=self.webpackChunklean_jsx_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro","href":"/docs/intro","docId":"intro"},{"type":"link","label":"Principles","href":"/docs/principles","docId":"principles"},{"type":"category","label":"Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The engine","href":"/docs/architecture/the-engine","docId":"architecture/the-engine"},{"type":"link","label":"Server-side JSX","href":"/docs/architecture/components","docId":"architecture/components"},{"type":"link","label":"HTTP streaming","href":"/docs/architecture/streaming","docId":"architecture/streaming"},{"type":"link","label":"Static and dynamic content","href":"/docs/architecture/static-vs-dynamic","docId":"architecture/static-vs-dynamic"},{"type":"link","label":"Event handlers, state, and context management","href":"/docs/architecture/state-and-context","docId":"architecture/state-and-context"},{"type":"link","label":"Use cases and limitations","href":"/docs/architecture/use-cases","docId":"architecture/use-cases"}],"href":"/docs/category/architecture"},{"type":"category","label":"Getting started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Setting up LeanJSX","href":"/docs/tutorial-basics/create-a-project","docId":"tutorial-basics/create-a-project"},{"type":"link","label":"Dependencies","href":"/docs/tutorial-basics/dependencies","docId":"tutorial-basics/dependencies"},{"type":"link","label":"Project structure","href":"/docs/tutorial-basics/project-structure","docId":"tutorial-basics/project-structure"}],"href":"/docs/category/getting-started"},{"type":"category","label":"FAQ","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What\'s the problem with JavaScript frameworks?","href":"/docs/faq/why-not-js-frameworks","docId":"faq/why-not-js-frameworks"},{"type":"link","label":"Why not just a SO (server-oriented) web framework?","href":"/docs/faq/why-not-so-frameworks","docId":"faq/why-not-so-frameworks"},{"type":"link","label":"Why not just pure HTML and JavaScript?","href":"/docs/faq/why-not-vanilla","docId":"faq/why-not-vanilla"}],"href":"/docs/category/faq"},{"type":"link","label":"Contribute to the project","href":"/docs/collaborating","docId":"collaborating"},{"type":"link","label":"Mainteners","href":"/docs/about","docId":"about"}]},"docs":{"about":{"id":"about","title":"Mainteners","description":"LeanJSX is created and maintained by Pedro Marquez-Soto.","sidebar":"tutorialSidebar"},"architecture/components":{"id":"architecture/components","title":"Server-side JSX","description":"LeanJSX takes advantage of the collocation of HTML and JavaScript and abstracts away all the setup needed to connect action handlers with elements.","sidebar":"tutorialSidebar"},"architecture/state-and-context":{"id":"architecture/state-and-context","title":"Event handlers, state, and context management","description":"LeanJSX approach to content rendering requires developers to manage application state in a different way than regular JavaScript frameworks.","sidebar":"tutorialSidebar"},"architecture/static-vs-dynamic":{"id":"architecture/static-vs-dynamic","title":"Static and dynamic content","description":"Work in progress. Support for updating dynamic content after the page is loaded is currently on process, which means that dynamic behavior post page load needs to be manually implemented by developers.","sidebar":"tutorialSidebar"},"architecture/streaming":{"id":"architecture/streaming","title":"HTTP streaming","description":"Chunked Transfer Encoding or HTTP streaming has been available since HTTP 1.1. However, most web frameworks -either server-driven or SSR-based- don\'t fully take advantage of this feature by default. Developers need to explicitely configure their endpoint handlers to provide a streamed response.","sidebar":"tutorialSidebar"},"architecture/the-engine":{"id":"architecture/the-engine","title":"The engine","description":"LeanJSX provides three main features:","sidebar":"tutorialSidebar"},"architecture/use-cases":{"id":"architecture/use-cases","title":"Use cases and limitations","description":"LeanJSX\'s approach to handling both static and dynamic content sets some hard constraints on how developers build their applications, and defines the type of web applications for which LeanJSX is a good tool.","sidebar":"tutorialSidebar"},"collaborating":{"id":"collaborating","title":"Contribute to the project","description":"Developers are welcomed to collaborate to the project by opening Pull Requests in the Github repositories, reporting bugs or requesting features.","sidebar":"tutorialSidebar"},"faq/why-not-js-frameworks":{"id":"faq/why-not-js-frameworks","title":"What\'s the problem with JavaScript frameworks?","description":"Probably you have heard the quote You don\'t need a JavaScript framweork for that!.","sidebar":"tutorialSidebar"},"faq/why-not-so-frameworks":{"id":"faq/why-not-so-frameworks","title":"Why not just a SO (server-oriented) web framework?","description":"Unfortunately, existing SO (server-oriented) web frameworks focus too little in the actual web development experience that JavaScript frameworks have cultivated for years:","sidebar":"tutorialSidebar"},"faq/why-not-vanilla":{"id":"faq/why-not-vanilla","title":"Why not just pure HTML and JavaScript?","description":"Vanilla JavaScript requires a considerable amount of code to setup any kind of dynamic behavior: Get DOM references, create event listeners for buttons, etc; all in a context external to the referenced HTML elements.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Intro","description":"LeanJSX is a server-driven library that allows you to build HTML components using JSX-like syntax, but without relying on hefty client-side JavaScript libraries or frameworks.","sidebar":"tutorialSidebar"},"principles":{"id":"principles","title":"Principles","description":"The LeanJSX project was created due the following principles and ideas:","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-project":{"id":"tutorial-basics/create-a-project","title":"Setting up LeanJSX","description":"Create a new project","sidebar":"tutorialSidebar"},"tutorial-basics/dependencies":{"id":"tutorial-basics/dependencies","title":"Dependencies","description":"LeanJSX relies on the following tooling:","sidebar":"tutorialSidebar"},"tutorial-basics/project-structure":{"id":"tutorial-basics/project-structure","title":"Project structure","description":"A LeanJSX project generated with generator-lean-jsx has the following structure:","sidebar":"tutorialSidebar"}}}')}}]);