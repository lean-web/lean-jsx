"use strict";(self.webpackChunklean_jsx_docs=self.webpackChunklean_jsx_docs||[]).push([[9400],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=m(n),u=r,h=s["".concat(p,".").concat(u)]||s[u]||d[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(7896),r=(n(2784),n(876));const o={sidebar_position:5},i="Create a dynamic component",l={unversionedId:"tutorial-basics/create-a-dynamic-component",id:"tutorial-basics/create-a-dynamic-component",title:"Create a dynamic component",description:"For a component to have dynamic behavior -that is, to being able to update or re-render its contents without reloading the whole page- it needs to be explicitely configured as a dynamic component.",source:"@site/docs/tutorial-basics/create-a-dynamic-component.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create-a-dynamic-component",permalink:"/lean-jsx/docs/tutorial-basics/create-a-dynamic-component",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Create a component",permalink:"/lean-jsx/docs/tutorial-basics/create-a-component"},next:{title:"Dependencies",permalink:"/lean-jsx/docs/tutorial-basics/dependencies"}},p={},m=[{value:"Updating a dynamic component",id:"updating-a-dynamic-component",level:2},{value:"Example: Rendering the server&#39;s date",id:"example-rendering-the-servers-date",level:2},{value:"Configuring query params in the middlware",id:"configuring-query-params-in-the-middlware",level:3}],c={toc:m},s="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(s,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-a-dynamic-component"},"Create a dynamic component"),(0,r.kt)("p",null,"For a component to have dynamic behavior -that is, to being able to update or re-render its contents without reloading the whole page- it needs to be explicitely configured as a ",(0,r.kt)("strong",{parentName:"p"},"dynamic component"),"."),(0,r.kt)("p",null,"Currently, creating a dynamic process is a bit more convolved process than creating a static component, and it requires the usage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetDynamicComponent")," helper function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'export const MyDynamicComponent = GetDynamicComponent<MyData,SXLGlobalContext>(\n    "my-dynamic-component",\n    async () => {\n        const data = await getData()\n        return data;\n    },\n    (data, props) => {\n        if (data.isPending) {\n            return <>Loading...</>;\n        }\n\n        return <div>Loaded: {data.value}</div>\n    },\n);\n\n// ...\n\n<MyDynamicComponent.Render />\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetDynamicComponent")," function receives three arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Component ID (",(0,r.kt)("inlineCode",{parentName:"li"},"string"),"): A unique ID used to identify the dynamic component."),(0,r.kt)("li",{parentName:"ul"},"Data Fetcher (",(0,r.kt)("inlineCode",{parentName:"li"},"() => MyData"),"): A function that returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise")," with the data the component needs to fetch. The type for the Promise contents is passed in the ",(0,r.kt)("inlineCode",{parentName:"li"},"GetDynamicComponent")," first type parameter (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"MyData"),")."),(0,r.kt)("li",{parentName:"ul"},"Render function: (",(0,r.kt)("inlineCode",{parentName:"li"},"(data:TrackedPromise<MyData>, props: SXL.Props) => JSX.Element"),"): A function that receives the promise returned by the data fetcher, wrapped in ",(0,r.kt)("inlineCode",{parentName:"li"},"TrackedPromise")," -which is an extension for ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise")," that exposes methods for tracking its state-, and the props passed to the component.")),(0,r.kt)("h2",{id:"updating-a-dynamic-component"},"Updating a dynamic component"),(0,r.kt)("p",null,"All dynamic components can be updated using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/architecture/state-and-context#the-webaction-helper"},"webAction")," helper:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<button\n    onclick={webAction({}, (ev, webContext) => {\n        webContext?\n          .actions?\n          .refetchElement("my-dynamic-component", {\n            // pass query parameters\n          });\n    })}>\n    Reload\n</button>\n')),(0,r.kt)("p",null,"This helper creates all bindings necessary to update a dynamic component."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"refetchElement")," receives two parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Component ID (",(0,r.kt)("inlineCode",{parentName:"li"},"string"),"): The ID for the component to update"),(0,r.kt)("li",{parentName:"ul"},"Query parameters (",(0,r.kt)("inlineCode",{parentName:"li"},"Record<string, string>"),"): A map of query parameters for the updated component.")),(0,r.kt)("h2",{id:"example-rendering-the-servers-date"},"Example: Rendering the server's date"),(0,r.kt)("p",null,"Let us create an example to understand how to update dynamic components."),(0,r.kt)("p",null,"First, we will create a dynamic component called ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerDateComponent"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'export const ServerDateComponent = GetDynamicComponent<\n    Date,\n    SXLGlobalContext & { mmDDYY?: boolean }\n>(\n    "my-server-date-component",\n    async () => {\n        const serverDate = await getServerDate();\n        return serverDate;\n    },\n    (data, props) => {\n        if (data.isPending) {\n            return <>Loading...</>;\n        }\n\n        const serverDate: Date = data.value;\n\n        if (props?.globalContext?.mmDDYY) {\n            const dateFormatted = new Intl.DateTimeFormat("en-US", {\n                year: "numeric",\n                month: "2-digit",\n                day: "2-digit",\n            }).format(serverDate);\n            return <div>Server date: {dateFormatted}</div>;\n        }\n        return <div>Server date: {serverDate.toISOString()}</div>;\n    },\n);\n\n// ...\n\n<ServerDateComponent.Render />\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerDateComponent")," does a couple of things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Two type parameters are passed to the ",(0,r.kt)("inlineCode",{parentName:"li"},"GetDynamicComponent")," signature:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Date"),": The type for the data returned by the fetcher."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SXLGlobalContext & { mmDDYY?: boolean }"),": An extension of the global context ",(0,r.kt)("inlineCode",{parentName:"li"},"SXLGlobalContext")," with the boolean query parameter ",(0,r.kt)("inlineCode",{parentName:"li"},"mmDDYY"),"."))),(0,r.kt)("li",{parentName:"ul"},"We pass a fetcher function that retrieves a date from the server using ",(0,r.kt)("inlineCode",{parentName:"li"},"getServerDate()"),"."),(0,r.kt)("li",{parentName:"ul"},"While the component is fetching the server date, a ",(0,r.kt)("inlineCode",{parentName:"li"},"Loading")," message will be displayed."),(0,r.kt)("li",{parentName:"ul"},"Once the promise is resolved, the server ",(0,r.kt)("inlineCode",{parentName:"li"},"Date")," object is retrieved using ",(0,r.kt)("inlineCode",{parentName:"li"},"data.value"),"."),(0,r.kt)("li",{parentName:"ul"},"Then, depending whether ",(0,r.kt)("inlineCode",{parentName:"li"},"mmDDYY")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", it renders a string representation either in format ",(0,r.kt)("inlineCode",{parentName:"li"},"mm/dd/yy")," or ISO.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Note"),": All this logic happens on the server side. The dynamic component on the browser-side will receive the fully rendered HTML content returned by the component. Any temporary state contained by the component on the browser (e.g. the text in any input field) will be discarded if it's not explicitely sent to the server as a query parameter."))),(0,r.kt)("p",null,"Now, let's create a second ",(0,r.kt)("strong",{parentName:"p"},"static")," component which will update the contents of our dynamic ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerDateComponent"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'export function ReplacerComponent() {\n    return (\n        <>\n            <button\n                onclick={webAction({}, (ev, webContext) => {\n                    webContext?.actions?.refetchElement(\n                        "my-server-date-component",\n                        {\n                            mmDDYY: true,\n                        },\n                    );\n                })}\n            >\n                Get server date on mm/dd/yyyy format\n            </button>\n            <button\n                onclick={webAction({}, (ev, webContext) => {\n                    console.log("Replace");\n                    webContext?.actions?.refetchElement(\n                        "my-server-date-component",\n                        {},\n                    );\n                })}\n            >\n                Get server date on ISO format\n            </button>\n        </>\n    );\n}\n// ...\n<ReplacerComponent/>\n')),(0,r.kt)("p",null,"Notice a few things here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Static components ",(0,r.kt)("em",{parentName:"li"},"can")," use the ",(0,r.kt)("inlineCode",{parentName:"li"},"webAction")," helper. A component doesn't need to be a dynamic component to update another dynamic component."),(0,r.kt)("li",{parentName:"ul"},"The component renders two buttons, both of which updates the dynamic component using its ID (",(0,r.kt)("inlineCode",{parentName:"li"},'"my-server-date-component"'),"):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The first button passes the ",(0,r.kt)("inlineCode",{parentName:"li"},"mmDDYY")," query parameter set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},"The second button passes no query parameters, which will re-render the dynamic component using its default state (rendering the date in ISO format).")))),(0,r.kt)("p",null,"After rendering both components, we can see the dynamic component being updated correctly:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"A GIF animation showing how the server date rendered by the dynamic component is updated every time one of the buttons is clicked",src:n(5890).Z,width:"464",height:"180"})),(0,r.kt)("h3",{id:"configuring-query-params-in-the-middlware"},"Configuring query params in the middlware"),(0,r.kt)("p",null,"Currently, query parameters like ",(0,r.kt)("inlineCode",{parentName:"p"},"mmDDYY")," need to be configured in LeanJSX middleware to be parsed from the request query parameters if they are not part of the global context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'app.use(\n    LeanApp.middleware({\n        configResponse: (resp) => resp.set("Content-Security-Policy", CSP),\n        globalContextParser: (req, componentId) => {\n            if (componentId === ServerDateComponent.contentId) {\n                return {\n                    ...parseQueryParams(req),\n                    ...{\n                        mmDDYY: Boolean(req.query?.mmDDYY),\n                    },\n                };\n            }\n            return parseQueryParams(req);\n        },\n    }),\n);\n')),(0,r.kt)("p",null,"We add a check in ",(0,r.kt)("inlineCode",{parentName:"p"},"globalContextParser")," to see if ",(0,r.kt)("inlineCode",{parentName:"p"},"componentId")," matches our component's ID, and if it does, we parse the ",(0,r.kt)("inlineCode",{parentName:"p"},"mmDDYY")," query param. This allows us have query params that are specific to a component without polluting the global context."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: The middleware configuration may not be needed in future versions of LeanJSX.")))}d.isMDXComponent=!0},5890:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dynamic-component-action-94570c5af81103b2ba87d34b4f406a8f.gif"}}]);